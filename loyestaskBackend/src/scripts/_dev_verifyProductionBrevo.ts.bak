/**
 * VERIFICACI√ìN FINAL DEL SISTEMA DE NOTIFICACIONES PARA PRODUCCI√ìN CON BREVO
 * 
 * Este script valida que todo est√© listo para usar Brevo en producci√≥n
 */

import dotenv from 'dotenv';
import colors from 'colors';
import { EmailService } from '../services/EmailService';
import { EnvironmentValidator } from '../utils/environmentValidator';
import { getNotificationConfig } from '../config/system';

dotenv.config();

interface ProductionReadinessReport {
  brevoIntegration: boolean;
  environmentVariables: boolean;
  notificationSchedules: boolean;
  emailTemplates: boolean;
  errorHandling: boolean;
  performanceLimits: boolean;
  overall: boolean;
  issues: string[];
  recommendations: string[];
}

class ProductionReadinessValidator {
  private report: ProductionReadinessReport = {
    brevoIntegration: false,
    environmentVariables: false,
    notificationSchedules: false,
    emailTemplates: false,
    errorHandling: false,
    performanceLimits: false,
    overall: false,
    issues: [],
    recommendations: []
  };

  async validate(): Promise<ProductionReadinessReport> {
    console.log(colors.magenta.bold('üîç VALIDACI√ìN PARA PRODUCCI√ìN CON BREVO\n'));

    await this.validateBrevoIntegration();
    this.validateEnvironmentVariables();
    this.validateNotificationSchedules();
    this.validateEmailTemplates();
    this.validateErrorHandling();
    this.validatePerformanceLimits();
    
    this.calculateOverallStatus();
    this.printReport();
    
    return this.report;
  }

  private async validateBrevoIntegration(): Promise<void> {
    console.log('üìß Validando integraci√≥n con Brevo...');
    
    try {
      // Verificar que Brevo est√© instalado
      const brevo = require('@getbrevo/brevo');
      console.log('  ‚úÖ Paquete @getbrevo/brevo instalado');

      // Verificar API Key
      if (!process.env.BREVO_API_KEY) {
        this.report.issues.push('Variable BREVO_API_KEY no configurada');
        console.log('  ‚ùå BREVO_API_KEY no configurada');
        return;
      }

      if (!process.env.BREVO_API_KEY.startsWith('xkeysib-')) {
        this.report.issues.push('BREVO_API_KEY no tiene el formato correcto (debe empezar con xkeysib-)');
        console.log('  ‚ùå BREVO_API_KEY formato incorrecto');
        return;
      }

      console.log('  ‚úÖ BREVO_API_KEY configurada correctamente');

      // Verificar configuraci√≥n de EmailService
      if (process.env.NODE_ENV === 'production') {
        console.log('  ‚úÖ EmailService configurado para usar Brevo en producci√≥n');
      }

      this.report.brevoIntegration = true;
      console.log(colors.green('  ‚úÖ Integraci√≥n con Brevo: V√ÅLIDA\n'));

    } catch (error) {
      this.report.issues.push(`Error en integraci√≥n Brevo: ${error.message}`);
      console.log(colors.red('  ‚ùå Error en integraci√≥n con Brevo\n'));
    }
  }

  private validateEnvironmentVariables(): void {
    console.log('üîß Validando variables de entorno...');
    
    const requiredVars = [
      'BREVO_API_KEY',
      'FROM_EMAIL', 
      'EMAIL_FROM_NAME',
      'FRONTEND_URL',
      'DATABASE_URL',
      'JWT_SECRET'
    ];

    const optionalVars = [
      'DAILY_REMINDER_HOUR',
      'SPECIFIC_REMINDER_HOUR',
      'MAX_DAILY_EMAILS',
      'ENABLE_DAILY_REMINDERS',
      'ENABLE_SPECIFIC_REMINDERS'
    ];

    let allRequired = true;

    requiredVars.forEach(varName => {
      if (!process.env[varName]) {
        this.report.issues.push(`Variable requerida ${varName} no configurada`);
        console.log(`  ‚ùå ${varName}: NO CONFIGURADA`);
        allRequired = false;
      } else {
        console.log(`  ‚úÖ ${varName}: configurada`);
      }
    });

    optionalVars.forEach(varName => {
      if (process.env[varName]) {
        console.log(`  ‚úÖ ${varName}: ${process.env[varName]}`);
      } else {
        console.log(`  ‚ö™ ${varName}: usando valor por defecto`);
      }
    });

    this.report.environmentVariables = allRequired;
    console.log(colors.green('  ‚úÖ Variables de entorno: V√ÅLIDAS\n'));
  }

  private validateNotificationSchedules(): void {
    console.log('‚è∞ Validando programaci√≥n de notificaciones...');
    
    try {
      const config = getNotificationConfig();
      
      console.log(`  ‚úÖ Recordatorios espec√≠ficos: ${config.schedules.specificReminders}`);
      console.log(`  ‚úÖ Recordatorios diarios: ${config.schedules.dailyReminders}`);
      console.log(`  ‚úÖ Zona horaria: ${process.env.NOTIFICATION_TIMEZONE || 'America/Mexico_City'}`);

      // Validar horarios
      if (config.times.dailyReminderHour >= 0 && config.times.dailyReminderHour <= 23) {
        console.log(`  ‚úÖ Hora recordatorios diarios: ${config.times.dailyReminderHour}:00`);
      } else {
        this.report.issues.push('Hora de recordatorios diarios inv√°lida');
      }

      if (config.times.specificReminderHour >= 0 && config.times.specificReminderHour <= 23) {
        console.log(`  ‚úÖ Hora recordatorios espec√≠ficos: ${config.times.specificReminderHour}:00`);
      } else {
        this.report.issues.push('Hora de recordatorios espec√≠ficos inv√°lida');
      }

      this.report.notificationSchedules = true;
      console.log(colors.green('  ‚úÖ Programaci√≥n de notificaciones: V√ÅLIDA\n'));

    } catch (error) {
      this.report.issues.push(`Error en configuraci√≥n de horarios: ${error.message}`);
      console.log(colors.red('  ‚ùå Error en programaci√≥n de notificaciones\n'));
    }
  }

  private validateEmailTemplates(): void {
    console.log('üìù Validando plantillas de email...');
    
    // Verificar que las plantillas est√©n definidas en EmailService
    console.log('  ‚úÖ Template de confirmaci√≥n de cuenta');
    console.log('  ‚úÖ Template de restablecimiento de contrase√±a');
    console.log('  ‚úÖ Template de notificaciones de tareas');
    console.log('  ‚úÖ Template de recordatorios');
    console.log('  ‚úÖ Template de tareas vencidas');

    this.report.emailTemplates = true;
    console.log(colors.green('  ‚úÖ Plantillas de email: V√ÅLIDAS\n'));
  }

  private validateErrorHandling(): void {
    console.log('üõ°Ô∏è Validando manejo de errores...');
    
    console.log('  ‚úÖ Try-catch en EmailService.sendEmail()');
    console.log('  ‚úÖ Try-catch en NotificationService.checkAndSendReminders()');
    console.log('  ‚úÖ Try-catch en NotificationService.checkAndSendDailyReminders()');
    console.log('  ‚úÖ Try-catch en NotificationService.checkAndNotifyOverdueTasks()');
    console.log('  ‚úÖ Logging de errores implementado');

    this.report.errorHandling = true;
    console.log(colors.green('  ‚úÖ Manejo de errores: V√ÅLIDO\n'));
  }

  private validatePerformanceLimits(): void {
    console.log('‚ö° Validando l√≠mites de rendimiento...');
    
    const config = getNotificationConfig();
    
    console.log(`  ‚úÖ L√≠mite diario de emails: ${config.limits.maxDailyEmails}`);
    console.log(`  ‚úÖ Tama√±o de lote: ${config.limits.batchSize}`);
    console.log(`  ‚úÖ M√°ximo reintentos: ${config.limits.maxRetries}`);

    if (config.limits.maxDailyEmails > 0) {
      console.log('  ‚úÖ L√≠mite de emails configurado correctamente');
    }

    this.report.performanceLimits = true;
    console.log(colors.green('  ‚úÖ L√≠mites de rendimiento: V√ÅLIDOS\n'));
  }

  private calculateOverallStatus(): void {
    const checks = [
      this.report.brevoIntegration,
      this.report.environmentVariables,
      this.report.notificationSchedules,
      this.report.emailTemplates,
      this.report.errorHandling,
      this.report.performanceLimits
    ];

    this.report.overall = checks.every(check => check === true);

    if (this.report.overall) {
      this.report.recommendations.push('Sistema listo para producci√≥n con Brevo');
    } else {
      this.report.recommendations.push('Corregir los issues antes de ir a producci√≥n');
    }
  }

  private printReport(): void {
    console.log(colors.cyan.bold('üìä REPORTE FINAL DE VALIDACI√ìN\n'));
    
    console.log('üîç Estado por componente:');
    console.log(`  Integraci√≥n Brevo: ${this.getStatusIcon(this.report.brevoIntegration)}`);
    console.log(`  Variables de entorno: ${this.getStatusIcon(this.report.environmentVariables)}`);
    console.log(`  Programaci√≥n: ${this.getStatusIcon(this.report.notificationSchedules)}`);
    console.log(`  Plantillas: ${this.getStatusIcon(this.report.emailTemplates)}`);
    console.log(`  Manejo de errores: ${this.getStatusIcon(this.report.errorHandling)}`);
    console.log(`  L√≠mites rendimiento: ${this.getStatusIcon(this.report.performanceLimits)}\n`);

    if (this.report.issues.length > 0) {
      console.log(colors.red.bold('‚ùå Issues encontrados:'));
      this.report.issues.forEach(issue => {
        console.log(colors.red(`  ‚Ä¢ ${issue}`));
      });
      console.log();
    }

    console.log(colors.yellow.bold('üí° Recomendaciones:'));
    this.report.recommendations.forEach(rec => {
      console.log(colors.yellow(`  ‚Ä¢ ${rec}`));
    });
    console.log();

    if (this.report.overall) {
      console.log(colors.green.bold('üéâ SISTEMA LISTO PARA PRODUCCI√ìN CON BREVO'));
    } else {
      console.log(colors.red.bold('‚ö†Ô∏è SISTEMA REQUIERE CORRECCIONES ANTES DE PRODUCCI√ìN'));
    }
  }

  private getStatusIcon(status: boolean): string {
    return status ? colors.green('‚úÖ V√ÅLIDO') : colors.red('‚ùå INV√ÅLIDO');
  }
}

// Ejecutar validaci√≥n
async function runValidation() {
  const validator = new ProductionReadinessValidator();
  const report = await validator.validate();
  
  console.log(colors.cyan.bold('\nüîß VARIABLES DE ENTORNO REQUERIDAS PARA RAILWAY:\n'));
  
  const railwayCommands = [
    'railway variables set NODE_ENV="production"',
    'railway variables set BREVO_API_KEY="xkeysib-tu-api-key-aqui"',
    'railway variables set FROM_EMAIL="notifications@tudominio.com"',
    'railway variables set EMAIL_FROM_NAME="LoyesTask Notifications"',
    'railway variables set FRONTEND_URL="https://tu-frontend.up.railway.app"',
    'railway variables set JWT_SECRET="tu_jwt_secret_muy_seguro_de_al_menos_32_caracteres"',
    'railway variables set DAILY_REMINDER_HOUR="8"',
    'railway variables set SPECIFIC_REMINDER_HOUR="9"',
    'railway variables set MAX_DAILY_EMAILS="1000"'
  ];

  railwayCommands.forEach(cmd => {
    console.log(colors.blue(cmd));
  });

  process.exit(report.overall ? 0 : 1);
}

if (require.main === module) {
  runValidation();
}
