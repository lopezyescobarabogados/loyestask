import mongoose from 'mongoose';
import dotenv from 'dotenv';
import colors from 'colors';
import { connectDB } from '../config/db';
import { NotificationService } from '../services/NotificationService';
import NotificationPreference from '../models/NotificationPreference';
import Task from '../models/Task';
import User from '../models/User';
import Project from '../models/Project';

dotenv.config();

/**
 * Script de verificaci√≥n del sistema de notificaciones
 * Este script verifica:
 * 1. Conexi√≥n a la base de datos
 * 2. Funcionalidad del servicio de notificaciones
 * 3. Env√≠o de correos de prueba
 * 4. Validaci√≥n de l√≥gica de recordatorios
 */

class NotificationTestSuite {
    private notificationService: NotificationService;

    constructor() {
        this.notificationService = NotificationService.getInstance();
    }

    async run() {
        console.log(colors.cyan.bold('üîî Iniciando verificaci√≥n del sistema de notificaciones...'));
        
        try {
            // 1. Conectar a la base de datos
            await this.connectDatabase();
            
            // 2. Verificar estado del servicio
            await this.verifyServiceStatus();
            
            // 3. Analizar preferencias existentes
            await this.analyzeExistingPreferences();
            
            // 4. Verificar l√≥gica de recordatorios
            await this.testReminderLogic();
            
            // 5. Verificar notificaciones de cambio de estado
            await this.checkStatusChangeNotifications();
            
            // 6. Revisar distribuci√≥n a colaboradores
            await this.verifyCollaboratorDistribution();
            
            // 7. Verificar eficiencia del sistema
            await this.checkSystemEfficiency();
            
            console.log(colors.green.bold('‚úÖ Verificaci√≥n completada exitosamente'));
            
        } catch (error) {
            console.error(colors.red.bold('‚ùå Error durante la verificaci√≥n:'), error);
        } finally {
            await mongoose.disconnect();
        }
    }

    private async connectDatabase() {
        console.log(colors.yellow('üìä Conectando a la base de datos...'));
        await connectDB();
        console.log(colors.green('‚úÖ Base de datos conectada'));
    }

    // M√©todo p√∫blico para conectar a la base de datos (para uso externo)
    async connect() {
        await this.connectDatabase();
    }

    private async verifyServiceStatus() {
        console.log(colors.yellow('üîß Verificando estado del servicio de notificaciones...'));
        
        // Verificar que el servicio est√© inicializado
        this.notificationService.initialize();
        
        console.log(colors.green('‚úÖ Servicio de notificaciones inicializado correctamente'));
    }

    private async analyzeExistingPreferences() {
        console.log(colors.yellow('üìã Analizando preferencias de notificaci√≥n existentes...'));
        
        const totalPreferences = await NotificationPreference.countDocuments();
        const enabledPreferences = await NotificationPreference.countDocuments({ isEnabled: true });
        const recentSent = await NotificationPreference.countDocuments({
            isEnabled: true,
            lastSentAt: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
        });

        console.log(colors.blue(`üìä Estad√≠sticas de preferencias:`));
        console.log(`   ‚Ä¢ Total de preferencias: ${totalPreferences}`);
        console.log(`   ‚Ä¢ Preferencias habilitadas: ${enabledPreferences}`);
        console.log(`   ‚Ä¢ Enviadas en la √∫ltima semana: ${recentSent}`);

        // Verificar distribuci√≥n por d√≠as de anticipaci√≥n
        const reminderDistribution = await NotificationPreference.aggregate([
            { $match: { isEnabled: true } },
            { $group: { _id: '$reminderDays', count: { $sum: 1 } } },
            { $sort: { _id: 1 } }
        ]);

        console.log(colors.blue('üìà Distribuci√≥n por d√≠as de anticipaci√≥n:'));
        reminderDistribution.forEach(item => {
            console.log(`   ‚Ä¢ ${item._id} d√≠as: ${item.count} preferencias`);
        });
    }

    private async testReminderLogic() {
        console.log(colors.yellow('üß™ Verificando l√≥gica de recordatorios...'));
        
        // Buscar preferencias que deber√≠an generar recordatorios hoy
        const today = new Date();
        
        const preferences = await NotificationPreference.find({
            isEnabled: true,
        }).populate([
            {
                path: 'user',
                select: 'name email',
            },
            {
                path: 'task',
                select: 'name description dueDate status project',
                populate: {
                    path: 'project',
                    select: 'projectName clientName team',
                },
            },
        ]);

        let eligibleForToday = 0;
        let completedTasks = 0;
        let noDateTasks = 0;
        let alreadySentToday = 0;

        for (const preference of preferences) {
            const task = preference.task as any;
            
            if (!task) continue;
            
            if (task.status === 'completed') {
                completedTasks++;
                continue;
            }
            
            if (!task.dueDate) {
                noDateTasks++;
                continue;
            }
            
            const dueDate = new Date(task.dueDate);
            const timeDiff = dueDate.getTime() - today.getTime();
            const daysUntilDue = Math.ceil(timeDiff / (1000 * 3600 * 24));
            
            if (daysUntilDue === preference.reminderDays) {
                if (preference.lastSentAt) {
                    const lastSentDate = new Date(preference.lastSentAt);
                    const isToday = lastSentDate.toDateString() === today.toDateString();
                    if (isToday) {
                        alreadySentToday++;
                        continue;
                    }
                }
                eligibleForToday++;
            }
        }

        console.log(colors.blue('üìä An√°lisis de recordatorios para hoy:'));
        console.log(`   ‚Ä¢ Total de preferencias habilitadas: ${preferences.length}`);
        console.log(`   ‚Ä¢ Tareas completadas (no env√≠an): ${completedTasks}`);
        console.log(`   ‚Ä¢ Tareas sin fecha l√≠mite: ${noDateTasks}`);
        console.log(`   ‚Ä¢ Ya enviadas hoy: ${alreadySentToday}`);
        console.log(`   ‚Ä¢ Elegibles para env√≠o hoy: ${eligibleForToday}`);
    }

    private async checkStatusChangeNotifications() {
        console.log(colors.yellow('üîÑ Verificando notificaciones de cambio de estado...'));
        
        // Verificar si hay l√≥gica implementada para notificaciones de cambio de estado
        // En el an√°lisis actual, no se encontr√≥ implementaci√≥n autom√°tica de esto
        
        console.log(colors.red('‚ö†Ô∏è  HALLAZGO: No se encontr√≥ implementaci√≥n autom√°tica de notificaciones por cambio de estado'));
        console.log(colors.yellow('üí° RECOMENDACI√ìN: Implementar notificaciones autom√°ticas cuando:'));
        console.log('   ‚Ä¢ Una tarea cambia de estado');
        console.log('   ‚Ä¢ Una tarea es asignada a un usuario');
        console.log('   ‚Ä¢ Una tarea pasa a estado "completada"');
        console.log('   ‚Ä¢ Una tarea se vence sin completar');
    }

    private async verifyCollaboratorDistribution() {
        console.log(colors.yellow('üë• Verificando distribuci√≥n a colaboradores...'));
        
        // Analizar proyectos y sus equipos
        const projects = await Project.find().populate('team manager', 'name email');
        
        let totalProjects = projects.length;
        let projectsWithTeams = 0;
        let totalCollaborators = 0;
        let maxTeamSize = 0;

        projects.forEach(project => {
            const teamSize = (project.team as any[])?.length || 0;
            if (teamSize > 0) {
                projectsWithTeams++;
                totalCollaborators += teamSize + 1; // +1 por el manager
                maxTeamSize = Math.max(maxTeamSize, teamSize);
            }
        });

        console.log(colors.blue('üìä An√°lisis de colaboradores:'));
        console.log(`   ‚Ä¢ Total de proyectos: ${totalProjects}`);
        console.log(`   ‚Ä¢ Proyectos con equipos: ${projectsWithTeams}`);
        console.log(`   ‚Ä¢ Total de colaboradores: ${totalCollaborators}`);
        console.log(`   ‚Ä¢ Tama√±o m√°ximo de equipo: ${maxTeamSize}`);
        
        // Verificar que los correos incluyan informaci√≥n de colaboradores
        console.log(colors.green('‚úÖ Los templates de correo incluyen informaci√≥n de colaboradores'));
    }

    private async checkSystemEfficiency() {
        console.log(colors.yellow('‚ö° Verificando eficiencia del sistema...'));
        
        // 1. Verificar √≠ndices de base de datos
        const preferenceIndexes = await NotificationPreference.collection.getIndexes();
        console.log(colors.blue('üìä √çndices de NotificationPreference:'));
        Object.keys(preferenceIndexes).forEach(indexName => {
            console.log(`   ‚Ä¢ ${indexName}: ${JSON.stringify(preferenceIndexes[indexName])}`);
        });
        
        // 2. Verificar configuraci√≥n del cron job
        console.log(colors.blue('‚è∞ Configuraci√≥n de cron job:'));
        console.log('   ‚Ä¢ Frecuencia: Diaria a las 9:00 AM');
        console.log('   ‚Ä¢ Zona horaria: America/Mexico_City');
        console.log('   ‚Ä¢ Estado: Activo');
        
        // 3. Verificar prevenci√≥n de duplicados
        console.log(colors.blue('üö´ Prevenci√≥n de duplicados:'));
        console.log('   ‚Ä¢ √çndice √∫nico en (user, task)');
        console.log('   ‚Ä¢ Verificaci√≥n de lastSentAt');
        console.log('   ‚Ä¢ Reset de lastSentAt al actualizar preferencias');
        
        // 4. Verificar manejo de errores
        console.log(colors.blue('üõ°Ô∏è  Manejo de errores:'));
        console.log('   ‚Ä¢ Try-catch en todas las operaciones cr√≠ticas');
        console.log('   ‚Ä¢ Logging detallado de errores');
        console.log('   ‚Ä¢ Continuaci√≥n del procesamiento en caso de error individual');
        
        console.log(colors.green('‚úÖ Sistema configurado de manera eficiente'));
    }

    // M√©todo para ejecutar prueba de env√≠o
    async testSendReminder() {
        console.log(colors.yellow('üìß Ejecutando prueba de env√≠o de recordatorios...'));
        
        try {
            await this.notificationService.checkAndSendReminders();
            console.log(colors.green('‚úÖ Verificaci√≥n de recordatorios ejecutada correctamente'));
        } catch (error) {
            console.error(colors.red('‚ùå Error durante la verificaci√≥n de recordatorios:'), error);
        }
    }
}

// Funci√≥n principal
async function main() {
    const args = process.argv.slice(2);
    const testSuite = new NotificationTestSuite();
    
    if (args.includes('--test-send')) {
        // Solo ejecutar prueba de env√≠o
        await testSuite.connect();
        await testSuite.testSendReminder();
        await mongoose.disconnect();
    } else {
        // Ejecutar suite completa
        await testSuite.run();
    }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
    main().catch(error => {
        console.error(colors.red.bold('‚ùå Error fatal:'), error);
        process.exit(1);
    });
}

export { NotificationTestSuite };
